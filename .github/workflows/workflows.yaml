name: Demo App Pipeline

# Run actions when commit to master (development purposes)
on:
  push:
    branches: [ master ]
  pull_request:

# Only run when pull request merged, direct commits to master are disabled
# on:
#   pull_request:
#     branches: [master]
#     events: [closed]

jobs:
  lint:
    runs-on: ubuntu-22.04
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install dependencies for testing, linting steps
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install .
          pip install flake8 black

      # Attempt to fix linting issues prior to running flake8
      - name: Run Black to auto-format code
        run: black .

      # Ignore current code issue, no autofixing
      - name: Run Flake8
        run: flake8 --ignore=F401 .

  test:
    runs-on: ubuntu-22.04
    # Only run if linting job passes
    needs: lint
    steps:
      - uses: actions/checkout@v4

      - name: Use Python version 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9

      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('setup.py') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      # Install pytest for next step
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flask
          pip install pytest

      # Set pythonpath so gha knows the project root
      - name: Set PYTHONPATH
        run: echo "PYTHONPATH=." >> $GITHUB_ENV

      - name: Run tests
        run: pytest

  build-and-push:
    runs-on: ubuntu-22.04
    # Only run if test job completes
    needs: test
    permissions:
      id-token: write
      contents: read
    env:
      AWS_REGION: eu-west-1
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Authenticate using access key
      - name: Authenticate to AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-region: eu-west-1
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      # No permissions to create an IDP in IAM, need to use access key instead
      # Authenticate using OIDC
      # - name: Configure AWS credentials from OIDC
      #   id: configure-aws-credentials
      #   uses: aws-actions/configure-aws-credentials@v4
      #   with:
      #     role-to-assume: ${{ secrets.AWS_ROLE_ARN }}
      #     aws-region: ${{ env.AWS_REGION }}

      # Get the short SHA of the commit to use for image tagging
      - name: Get Git SHA and set environment variable
        run: echo "COMMIT_ID=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Login to ECR
        run: |
          aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com

      # Build docker image using the git SHA tag and production tag (used by Terraform)
      - name: Build Docker image
        id: build-image
        uses: docker/build-push-action@v5
        with:
          push: true 
          tags: |
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo-app:${{ env.COMMIT_ID }}
            ${{ secrets.AWS_ACCOUNT_ID }}.dkr.ecr.${{ env.AWS_REGION }}.amazonaws.com/demo-app:production
          file: Dockerfile
          platforms: linux/amd64
          provenance: false

      # Create new taskdef with new image tag as the deployment image
      - name: Render ECS task definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: demo-app
          image: ${{ steps.build-image.outputs.imageid }} # Get image tag from docker build step

      # Atttempt to deploy new tasks using new task definition
      - name: Deploy ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: demo-app
          cluster: demo-cluster
          wait-for-service-stability: true
